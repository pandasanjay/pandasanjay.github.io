{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/works/feature-toggles-ideas-and-uses/","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<h4>Easier to use! Easiest to Forget! Tools need to maintain! But better then Merge Conflicts!</h4>\n<blockquote>\n<h3><em>Knife helped us to chopping the onion! Be careful it can cut you fingers.</em></h3>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/4667/1*oUy4K1iGMy5bkQcsLbMwgA.png\" alt=\"Feature Toggle â€” Worth taking risk!\"></p>\n<p>This concept is not new, in traditional programming we use some flag to show hide the feature. The flag is stored in the DB and access by API.</p>\n<p>Today we will talk about feature toggles in Frontend application.</p>\n<p>Let see one scenario, we have two (suggest up to 5) team each having 5 members working on same code. Each team having their goal to deliver feature.</p>\n<p>Here is some questions comes to mind when we work on a multiple team one codebase.</p>\n<h1>How to manage code?</h1>\n<h5><strong>Can we put all the new features team code in separate branch?</strong></h5>\n<p>No, we canâ€™t keep branches long running. When you merge that to develop branch. That might cause merge hell. Believe me that is bad.</p>\n<h5><strong>Can we not take update from develop branch to feature branch every day?</strong></h5>\n<p>Yes, you can do that every day one of your team members need to take the responsibility.</p>\n<h5><strong>What if develop branch code is recently updated by other team a big feature with changes in 200 files.</strong></h5>\n<p>Now think about the merge conflicts and even if you solve the merge conflict by collaborate between team. You donâ€™t know which part of code might break.</p>\n<p>If every month if you find this two times also this is frustrating and time consuming.</p>\n<h1>How to test features?</h1>\n<h5><strong>Can we not do automated E2E testing which will help to find the issues?</strong></h5>\n<p>Very good, you can do that. But the we need to fix the test to allign with new features. E2E test passed but now itâ€™s time for tester to test.</p>\n<p>Now tester will need to understand the new scenario which he was not aware of. Think about the time west every place.</p>\n<h1>How to release feature?</h1>\n<p>Can you not release the feature when that is ready?\nGreat you are close to send your hard work to production time for party.ðŸ¥‚</p>\n<p>Oh no! The backend is not ready yet that will take few weeks, a third party integration taking time.</p>\n<p>Or</p>\n<p>Oh no! This feature will go after some other feature. Wait for 3 month.</p>\n<p>Ok we are in separate branch no worries we will wait.</p>\n<p>We are in agile, we canâ€™t wait for things to go. Itâ€™s time to move ahead for new features. Letâ€™s repeat all the above.</p>\n<p>Think about who is maintaining that later release branch.</p>\n<p>After 2 weeks or three monthsâ€¦</p>\n<p>Aha..we have the branch ready letâ€™s tell a developer to merge the feature branch to develop.</p>\n<p>Developer says allow me 2hr I will be ready with build.\nBusiness is waiting for the good news.</p>\n<p>Oh no! Not again. Develop branch having new changes we need to merge that resolve conflict then we have to test both feature every aspect. We can go release tomorrow. ðŸ™„</p>\n<p>Repeat this for every release.</p>\n<p>Now you know/remember the pain. letâ€™s dive into the the solution.</p>\n<h1>Feature Toggles!</h1>\n<h2>Very sharp like knife but very helpful.</h2>\n<p>Letâ€™s recap the scenario, we have two (suggest up to 5) micro team each having 5 members working on same code. Each team having their goal to deliver feature.</p>\n<h5><strong>How feature Toggles help us?</strong></h5>\n<p>Think that each feature will protected by a flag (e.g If condition) and those flags stored in a json files in your project. (You can store this any format depends on the project)</p>\n<p>Example: Team A develop a feature which is given name feature1 and Team B create one which is Feature2.</p>\n<p>When you build(e.g Make a bundle) your application as a Team A, your expectations is that need to show you only feature1 and hide feature2. Vice versa for Team B.</p>\n<p>How cool!!</p>\n<p>Now we are at stage where we donâ€™t need to create long running feature branches and we are always up-to-date with develop branch.</p>\n<p>Letâ€™s answer some of the questions.</p>\n<h5><strong>How team have confidence on their code when itâ€™s have multiple untested feature?</strong></h5>\n<p>Here is the part you have to be careful with E2E testing. Which will help you when you commit your changes this will perform switch off and switch on testing.</p>\n<h5><strong>How switch off and switch on testing will work?</strong></h5>\n<p>So it will run testing on for both the build for Team A and Team B.</p>\n<p>Take Team A build, which is feature 1 toggle switch on and feature 2 will be switched off. And the test will only run feature 1 test. And the opposite of Team B.</p>\n<h5><strong>How we will go production?</strong></h5>\n<p>When ever we ready with any feature we just remove the toggle from the config and go live from develop.</p>\n<p>If any delay in delivery keep the toggle.</p>\n<h4><strong>Life is little different here, we have to adopt some process first.</strong></h4>\n<ol>\n<li>No long running big feature branch.</li>\n<li>Keep team toggle config in different files.</li>\n<li>Adopt fail first approach</li>\n<li>Everything need to automated.</li>\n<li>Unit testing followed by functional testing with toggle on/off test and regression testing with toggle on/off test.</li>\n<li>Keep track of your toggles once released feature, remove toggle from code.</li>\n<li>Make the removal also automated. Use tool like (<a href=\"https://github.com/facebook/jscodeshift\">https://github.com/facebook/jscodeshift</a>)</li>\n</ol>\n<p>If your safety precaution is well set then you are all good to use toggle and release your features with confident. All the best!</p>\n<p>Please let me know your solution for the above problem. Might that helpful for others!</p>","frontmatter":{"title":"Feature Toggles Ideas and Uses!","tags":"Git,Toggles,Feature Toggles,CI CD Pipeline,Automation"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/works/feature-toggles-ideas-and-uses/"}}}